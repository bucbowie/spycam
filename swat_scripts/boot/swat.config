#!/bin/bash
# name: swat.config
# desc: Hold user information.
# usage: source swat.config.
#
######################################################
# Server Hardware                                    #
######################################################
export ETHERNET_DEVICE="eth0"                        # The Ethernet device type found in /etc/dhcpcd.conf
                                                     #     Allows you to override the Ethernet network of eth0.
export WIFI_DEVICE="wlan0"                           # The wireless device type found in /etc/dhcpcd.conf. 
                                                     #     Allows you to override the wireless network of wlan0.
#----------------------------------------------------#
# The next 2 lines are for modifying the router      #
# credentials. The settings are found in             #
# /etc/wpa_supplicant/wpa_supplicant.conf.           #
# If you do want to set these manually, simply       #
# blank out the values in the next two lines, and    #
# modify /etc/wpa_supplicant/wpa_supplicant.conf.    #
# Example:                                           #
# export MY_ROUTER_NAME="????????"                   #
# export MY_ROUTER_PW=""                             #
#----------------------------------------------------#
export MY_ROUTER_NAME="????????"                     # The SSID of your router.
export MY_ROUTER_PW="????????"                       # The PSK or password to your router.
###
# Server Hardware continued                          #
###
export MY_ROUTER_IP="???.???.???.???"                # The IP of your router.
#----------------------------------------------------#
# The next 2 lines are for STATIC IP. If you wish    #
# to use DHCP and have the system set the server IP, #
# then blank them out.                               #
# These settings are found in /etc/dhcpcd.conf.      #
# You can modify the settings manually if you wish to#
# bypass this scripts modifying them.                #
# You will need to modify /etc/dhcpcd.conf to add the#
# wired eth0 configuration and or the wireless wlan0 #
# configuration.                                     #
# Example:                                           #
# interface wlan0                                    #
# static ip_address=192.168.1.110/24                 #
# static routers=192.168.1.1                         #
# static domain_name_servers=192.168.1.1             #
# static domain_name_servers=8.8.8.8                 #
# static domain_name_servers=8.8.4.4                 #
#                                                    #
# You can modify the settings here and have the      #
# scripts set your IP addresses for you. If you      #
# choose to set the IP Addresses below, it will      #
# require 2 reboots: 1 to make the configuration     #
# (allowing you time to review what the scripts set);#
# 2. Reboot 2nd time to pick up new settings.        #
# Example:                                           #
# export MY_SERVER_WIFI_IP="192.168.1.184"           #
# export MY_SERVER_STATIC_IP="192.168.1.194"         #
#----------------------------------------------------#
export MY_SERVER_WIFI_IP="???.???.???.???"           # If you are using STATIC IP, this is the desired Wireless IP
export MY_SERVER_STATIC_IP="???.???.???.???"         # If you are using STATIC IP, this is the desired Ethernet IP
###                                                  #
# Server Hardware continued                          #
###                                                  #
export MY_CAMERA_NAME="Sec_Cam_`echo ${MY_SERVER_WIFI_IP}|cut -d"." -f4|sed 's/"//'`" #Unique Camera name
######################################################
# Peripheral Hardware                                #
######################################################
# The next 3 settings are optional and used for the  #
# optional IOT presence detection, where the         #
# camera will turn off when your cell phone is       #
# detected near by. Same goes for the BLUETOOTH      #
# address, if you are using an iBeacon.              #
#   If you do not wish to use the IOT automatic      #
# presence detection to turn off the camera, simply  #
# blank out the values for the next 3 lines.         #
# Example:                                           #
# export CELL_STATIC_IP="192.168.1.175"                           #
# export CELL_WIFI_MAC_ADDRESS="58:cb:52:07:ad:8e"                    #
# export CELL_BLUETOOTH_ADDRESS="58:cb:52:07:ad:8d"                   #
#----------------------------------------------------#
export CELL_STATIC_IP="???.???.???.???"              # IP of your Cell Phone. Optional setting, but used for IOT.
export CELL_WIFI_MAC_ADDRESS="??:??:??:??:??:??"     # MAC Address of your Cell Phone Wireless Network Card.
export CELL_BLUETOOTH_ADDRESS="??:??:??:??:??:??"    # Bluetooth address of your phone or any iBeacon you wish to use.
######################################################
# Script control                                     #
######################################################
# Next 3 settings are for emai, shoudl you desire    #
# email notification.                                #
export MY_EMAIL_MAIL_HUB="smtp.gmail.com:587"        # The MAIL service to send email. Known as the Mail HUB.
export MY_EMAIL_ADDRESS="????????@gmail.com"         # Your email ID for the mail service.
export MY_EMAIL_PW="????????????????"                # Your email password or authentication token.
###                                                  #
### script control continues                         #
###                                                  #
export CAMERA_CNT_WIFI_ABSENT_MINUTES=4              # Minutes to delay turning on the Camera once you have left.
export CAMERA_FOLDER_ROOT="/var/www/cam"             # The root directory where the Camera's config and output go.
#-----------------------------#
# Meta Data                   #
#-----------------------------#
export CAMERA_FOLDER_VIDEOS="${CAMERA_FOLDER_ROOT}/media" # The Camera's local directory to write videos.
export CAMERA_FOLDER_SCRIPTS="${CAMERA_FOLDER_ROOT}/macros" # The Camera's local script directory.
######################################################
# F U N C T I O N S
######################################################
#-------------------------------------------------
 function common_error_report() {
#-------------------------------------------------
 num_arg=3                                        
 if [ $# -ne $((num_arg)) ]; then                 
   {                                              
       echo "Error! common_error_report was passed: $@" 
       in_object="common_error_report"              
       in_rc="8"                                  
       in_msg="Num. arguments was: $#, expecting: ${num_arg}" 
   }                                              
 else                                             
   {                                              
       in_object=$1                               
       in_rc=$2                                   
       in_msg=$3                                  
   }                                              
 fi                                               
 if [ ${in_rc} -gt 7  ] ; then                    
   {                                              
	echo "#########################################"
	echo "# Trapped Error                          "
	echo "# Aborting process in `echo $(basename -- $(readlink -f -- $0))`"
	echo "#########################################"
	echo "# Details                                " 
	echo "#---------------------------------------#" 
	echo "# Script: ${in_object}                   " 
	echo "# Return Code: ${in_rc}                  " 
	echo "# Message: ${in_msg}                     " 
	echo "#---------------------------------------#" 
	if [[ "${OPT_VERBOSE}" == "Y" ]]; then           
           {
		echo "# Processing information                 " 
		echo "#---------------------------------------#" 
		echo -e "# Bash information: -->\c"              
		STACK=""                                         
		local i                                          
		local stack_size=${#FUNCNAME[@]}                 
		for (( i=1; i<$stack_size ; i++ )); do           
		      local func="${FUNCNAME[$i]}"               
			      [ x$func = x ] && func=MAIN                
			      local linen="${BASH_LINENO[(( i - 1 ))]}"  
			      local src="${BASH_SOURCE[$i]}"             
			      [ x"$src" = x ] && src=non_file_source     
			      STACK+=$func" "$src" "$linen               
			      echo "${STACK}"                            
		done                                             
		echo "# Error reported by function: $FUNCNAME  " 
		echo "# Here is the trace of the function call:" 
		echo "# ${FUNCNAME[*]}                         " 
		TRACE=""                                         
		CP=$$                                            
		while true                                       
		    do
				CMDLINE=$(cat /proc/$CP/cmdline)         
				PP=$(grep PPid /proc/$CP/status | awk '{ print $2; }') 
				TRACE="$TRACE [$CP]:$CMDLINE\n"          
				if [ "$CP" == "1" ]; then                
					break                            
				fi                                       
				CP=$PP                                   
		    done                                             
		echo "#---------------------------------------#"
		echo "# Backtrace of `basename "$0"`:          "
		echo "#---------------------------------------#"
		echo -en "$TRACE" | tac | grep -n ":"
		echo "#########################################"
		}                                      
	 fi                                       
        [[ -f ${IN_PROGRESS} ]] && rm -f ${IN_PROGRESS}
        trap "exit 1" TERM                                
        export SWAT_PID=$$
        echo=$(swat_kill $SWAT_PID)
        return 8
   }                                              
 else                                             
   {                                              
        echo "#########################################" 
        echo "# ${mySCRIPT}:function=common_error_report" 
        echo "# ${in_object} has return code of: ${in_rc}" 
        echo "# Message: ${in_msg}                    "  
        echo "#---------------------------------------#" 
   }                                              
 fi                                               
 }
#-------------------------------------------------
 function swat_kill() {                           
#-------------------------------------------------
 [[ ! -z $1 ]] && export SWAT_PID=$1
  echo "##-----------------------------------------#"  
  echo "## function swat_kill cleaning up ${IN_PROGRESS}"  
  echo  "##-----------------------------------------#" 
 kill -s TERM $PPID ;kill -s TERM $SWAT_PID       
 [[ -f ${IN_PROGRESS} ]] && rm -f ${IN_PROGRESS}                              
}                                                 
###                              
